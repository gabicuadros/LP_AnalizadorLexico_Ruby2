Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ALIAS
    BEGIN
    BOOLEANO
    BREAK
    CASE
    CLASS
    COMA
    DOBLECOMILLA
    ELIF
    ENSURE
    FILE
    FOR
    HASH
    IMPRIMIR
    IN
    INITIALIZE
    LDER
    LINE
    LIZQ
    MODULE
    NEGACION
    NEXT
    NIL
    NOT
    PUNTO
    PUNTOYCOMA
    RANGO
    REDO
    RESCUE
    RETRY
    RETURN
    SELF
    SUPER
    THEN
    UNDEF
    UNLESS
    UNTIL
    WHEN
    YIELD

Grammar

Rule 0     S' -> algoritmo
Rule 1     algoritmo -> imprimir
Rule 2     algoritmo -> asignacion
Rule 3     algoritmo -> expresion
Rule 4     algoritmo -> sentenciaIf
Rule 5     algoritmo -> comparacionLog
Rule 6     algoritmo -> sentenciaWhile
Rule 7     algoritmo -> sentenciaFuncion
Rule 8     algoritmo -> expresion_funcion
Rule 9     algoritmo -> ingreso
Rule 10    algoritmo -> sentenciaElse
Rule 11    sentenciaIf -> IF LPAREN comparacion RPAREN DOSPUNTOS algoritmo
Rule 12    sentenciaElse -> ELSE algoritmo END
Rule 13    sentenciaWhile -> WHILE LPAREN comparacion RPAREN DOSPUNTOS algoritmo
Rule 14    asignacion -> VARIABLE IGUAL valores
Rule 15    imprimir -> print
Rule 16    imprimir -> puts
Rule 17    valores -> expresion
Rule 18    valores -> true
Rule 19    valores -> false
Rule 20    true -> TRUE
Rule 21    false -> FALSE
Rule 22    ingreso -> gets
Rule 23    gets -> GETS expresion
Rule 24    print -> PRINT LPAREN expresion RPAREN
Rule 25    puts -> PUTS expresion
Rule 26    expresion -> valor
Rule 27    comparacion -> expresion operadorCom expresion
Rule 28    comparacionLog -> comparacion operadorLog comparacionLog
Rule 29    comparacionLog -> comparacion
Rule 30    expresion -> valor operadorMat expresion
Rule 31    operadorMat -> MAS
Rule 32    operadorMat -> RESTA
Rule 33    operadorMat -> DIV
Rule 34    operadorMat -> PROD
Rule 35    operadorMat -> POTENCIA
Rule 36    operadorMat -> MOD
Rule 37    operadorCom -> MAYOR
Rule 38    operadorCom -> MENOR
Rule 39    operadorCom -> MAYORIGU
Rule 40    operadorCom -> MENORIGU
Rule 41    operadorCom -> DIFERENTE
Rule 42    operadorCom -> IGUALA
Rule 43    operadorLog -> OPAND
Rule 44    operadorLog -> OPOR
Rule 45    operadorLog -> OPXOR
Rule 46    operadorLog -> AND
Rule 47    operadorLog -> OR
Rule 48    expresion_funcion -> VARIABLE LPAREN parametros RPAREN
Rule 49    parametros -> valor
Rule 50    parametros -> asignacion
Rule 51    sentenciaFuncion -> DEF expresion_funcion expresion END
Rule 52    array -> VARIABLE IGUAL CIZQ CDER
Rule 53    array -> VARIABLE IGUAL CIZQ valor CDER
Rule 54    array -> VARIABLE IGUAL ARRAY NEW
Rule 55    array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN
Rule 56    valor -> ENTERO
Rule 57    valor -> VARIABLE
Rule 58    valor -> CADENA
Rule 59    valor -> DECIMAL
Rule 60    valor -> array

Terminals, with rules where they appear

ALIAS                : 
AND                  : 46
ARRAY                : 54 55
BEGIN                : 
BOOLEANO             : 
BREAK                : 
CADENA               : 58
CASE                 : 
CDER                 : 52 53
CIZQ                 : 52 53
CLASS                : 
COMA                 : 
DECIMAL              : 59
DEF                  : 51
DIFERENTE            : 41
DIV                  : 33
DOBLECOMILLA         : 
DOSPUNTOS            : 11 13
ELIF                 : 
ELSE                 : 12
END                  : 12 51
ENSURE               : 
ENTERO               : 56
FALSE                : 21
FILE                 : 
FOR                  : 
GETS                 : 23
HASH                 : 
IF                   : 11
IGUAL                : 14 52 53 54 55
IGUALA               : 42
IMPRIMIR             : 
IN                   : 
INITIALIZE           : 
LDER                 : 
LINE                 : 
LIZQ                 : 
LPAREN               : 11 13 24 48 55
MAS                  : 31
MAYOR                : 37
MAYORIGU             : 39
MENOR                : 38
MENORIGU             : 40
MOD                  : 36
MODULE               : 
NEGACION             : 
NEW                  : 54 55
NEXT                 : 
NIL                  : 
NOT                  : 
OPAND                : 43
OPOR                 : 44
OPXOR                : 45
OR                   : 47
POTENCIA             : 35
PRINT                : 24
PROD                 : 34
PUNTO                : 
PUNTOYCOMA           : 
PUTS                 : 25
RANGO                : 
REDO                 : 
RESCUE               : 
RESTA                : 32
RETRY                : 
RETURN               : 
RPAREN               : 11 13 24 48 55
SELF                 : 
SUPER                : 
THEN                 : 
TRUE                 : 20
UNDEF                : 
UNLESS               : 
UNTIL                : 
VARIABLE             : 14 48 52 53 54 55 57
WHEN                 : 
WHILE                : 13
YIELD                : 
error                : 

Nonterminals, with rules where they appear

algoritmo            : 11 12 13 0
array                : 60
asignacion           : 2 50
comparacion          : 11 13 28 29
comparacionLog       : 5 28
expresion            : 3 17 23 24 25 27 27 30 51
expresion_funcion    : 8 51
false                : 19
gets                 : 22
imprimir             : 1
ingreso              : 9
operadorCom          : 27
operadorLog          : 28
operadorMat          : 30
parametros           : 48 55
print                : 15
puts                 : 16
sentenciaElse        : 10
sentenciaFuncion     : 7
sentenciaIf          : 4
sentenciaWhile       : 6
true                 : 18
valor                : 26 30 49 53
valores              : 14

Parsing method: LALR

state 0

    (0) S' -> . algoritmo
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . sentenciaIf
    (5) algoritmo -> . comparacionLog
    (6) algoritmo -> . sentenciaWhile
    (7) algoritmo -> . sentenciaFuncion
    (8) algoritmo -> . expresion_funcion
    (9) algoritmo -> . ingreso
    (10) algoritmo -> . sentenciaElse
    (15) imprimir -> . print
    (16) imprimir -> . puts
    (14) asignacion -> . VARIABLE IGUAL valores
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (11) sentenciaIf -> . IF LPAREN comparacion RPAREN DOSPUNTOS algoritmo
    (28) comparacionLog -> . comparacion operadorLog comparacionLog
    (29) comparacionLog -> . comparacion
    (13) sentenciaWhile -> . WHILE LPAREN comparacion RPAREN DOSPUNTOS algoritmo
    (51) sentenciaFuncion -> . DEF expresion_funcion expresion END
    (48) expresion_funcion -> . VARIABLE LPAREN parametros RPAREN
    (22) ingreso -> . gets
    (12) sentenciaElse -> . ELSE algoritmo END
    (24) print -> . PRINT LPAREN expresion RPAREN
    (25) puts -> . PUTS expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (27) comparacion -> . expresion operadorCom expresion
    (23) gets -> . GETS expresion
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DEF             shift and go to state 19
    ELSE            shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 23
    ENTERO          shift and go to state 24
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26
    GETS            shift and go to state 28

    algoritmo                      shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 5
    comparacionLog                 shift and go to state 6
    sentenciaWhile                 shift and go to state 7
    sentenciaFuncion               shift and go to state 8
    expresion_funcion              shift and go to state 9
    ingreso                        shift and go to state 10
    sentenciaElse                  shift and go to state 11
    print                          shift and go to state 12
    puts                           shift and go to state 13
    valor                          shift and go to state 15
    comparacion                    shift and go to state 17
    gets                           shift and go to state 20
    array                          shift and go to state 27

state 1

    (0) S' -> algoritmo .



state 2

    (1) algoritmo -> imprimir .

    $end            reduce using rule 1 (algoritmo -> imprimir .)
    END             reduce using rule 1 (algoritmo -> imprimir .)


state 3

    (2) algoritmo -> asignacion .

    $end            reduce using rule 2 (algoritmo -> asignacion .)
    END             reduce using rule 2 (algoritmo -> asignacion .)


state 4

    (3) algoritmo -> expresion .
    (27) comparacion -> expresion . operadorCom expresion
    (37) operadorCom -> . MAYOR
    (38) operadorCom -> . MENOR
    (39) operadorCom -> . MAYORIGU
    (40) operadorCom -> . MENORIGU
    (41) operadorCom -> . DIFERENTE
    (42) operadorCom -> . IGUALA

    $end            reduce using rule 3 (algoritmo -> expresion .)
    END             reduce using rule 3 (algoritmo -> expresion .)
    MAYOR           shift and go to state 30
    MENOR           shift and go to state 31
    MAYORIGU        shift and go to state 32
    MENORIGU        shift and go to state 33
    DIFERENTE       shift and go to state 34
    IGUALA          shift and go to state 35

    operadorCom                    shift and go to state 29

state 5

    (4) algoritmo -> sentenciaIf .

    $end            reduce using rule 4 (algoritmo -> sentenciaIf .)
    END             reduce using rule 4 (algoritmo -> sentenciaIf .)


state 6

    (5) algoritmo -> comparacionLog .

    $end            reduce using rule 5 (algoritmo -> comparacionLog .)
    END             reduce using rule 5 (algoritmo -> comparacionLog .)


state 7

    (6) algoritmo -> sentenciaWhile .

    $end            reduce using rule 6 (algoritmo -> sentenciaWhile .)
    END             reduce using rule 6 (algoritmo -> sentenciaWhile .)


state 8

    (7) algoritmo -> sentenciaFuncion .

    $end            reduce using rule 7 (algoritmo -> sentenciaFuncion .)
    END             reduce using rule 7 (algoritmo -> sentenciaFuncion .)


state 9

    (8) algoritmo -> expresion_funcion .

    $end            reduce using rule 8 (algoritmo -> expresion_funcion .)
    END             reduce using rule 8 (algoritmo -> expresion_funcion .)


state 10

    (9) algoritmo -> ingreso .

    $end            reduce using rule 9 (algoritmo -> ingreso .)
    END             reduce using rule 9 (algoritmo -> ingreso .)


state 11

    (10) algoritmo -> sentenciaElse .

    $end            reduce using rule 10 (algoritmo -> sentenciaElse .)
    END             reduce using rule 10 (algoritmo -> sentenciaElse .)


state 12

    (15) imprimir -> print .

    $end            reduce using rule 15 (imprimir -> print .)
    END             reduce using rule 15 (imprimir -> print .)


state 13

    (16) imprimir -> puts .

    $end            reduce using rule 16 (imprimir -> puts .)
    END             reduce using rule 16 (imprimir -> puts .)


state 14

    (14) asignacion -> VARIABLE . IGUAL valores
    (48) expresion_funcion -> VARIABLE . LPAREN parametros RPAREN
    (57) valor -> VARIABLE .
    (52) array -> VARIABLE . IGUAL CIZQ CDER
    (53) array -> VARIABLE . IGUAL CIZQ valor CDER
    (54) array -> VARIABLE . IGUAL ARRAY NEW
    (55) array -> VARIABLE . IGUAL ARRAY NEW LPAREN parametros RPAREN

    IGUAL           shift and go to state 36
    LPAREN          shift and go to state 37
    MAS             reduce using rule 57 (valor -> VARIABLE .)
    RESTA           reduce using rule 57 (valor -> VARIABLE .)
    DIV             reduce using rule 57 (valor -> VARIABLE .)
    PROD            reduce using rule 57 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 57 (valor -> VARIABLE .)
    MOD             reduce using rule 57 (valor -> VARIABLE .)
    MAYOR           reduce using rule 57 (valor -> VARIABLE .)
    MENOR           reduce using rule 57 (valor -> VARIABLE .)
    MAYORIGU        reduce using rule 57 (valor -> VARIABLE .)
    MENORIGU        reduce using rule 57 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 57 (valor -> VARIABLE .)
    IGUALA          reduce using rule 57 (valor -> VARIABLE .)
    $end            reduce using rule 57 (valor -> VARIABLE .)
    END             reduce using rule 57 (valor -> VARIABLE .)


state 15

    (26) expresion -> valor .
    (30) expresion -> valor . operadorMat expresion
    (31) operadorMat -> . MAS
    (32) operadorMat -> . RESTA
    (33) operadorMat -> . DIV
    (34) operadorMat -> . PROD
    (35) operadorMat -> . POTENCIA
    (36) operadorMat -> . MOD

    MAYOR           reduce using rule 26 (expresion -> valor .)
    MENOR           reduce using rule 26 (expresion -> valor .)
    MAYORIGU        reduce using rule 26 (expresion -> valor .)
    MENORIGU        reduce using rule 26 (expresion -> valor .)
    DIFERENTE       reduce using rule 26 (expresion -> valor .)
    IGUALA          reduce using rule 26 (expresion -> valor .)
    $end            reduce using rule 26 (expresion -> valor .)
    END             reduce using rule 26 (expresion -> valor .)
    OPAND           reduce using rule 26 (expresion -> valor .)
    OPOR            reduce using rule 26 (expresion -> valor .)
    OPXOR           reduce using rule 26 (expresion -> valor .)
    AND             reduce using rule 26 (expresion -> valor .)
    OR              reduce using rule 26 (expresion -> valor .)
    RPAREN          reduce using rule 26 (expresion -> valor .)
    MAS             shift and go to state 39
    RESTA           shift and go to state 40
    DIV             shift and go to state 41
    PROD            shift and go to state 42
    POTENCIA        shift and go to state 43
    MOD             shift and go to state 44

    operadorMat                    shift and go to state 38

state 16

    (11) sentenciaIf -> IF . LPAREN comparacion RPAREN DOSPUNTOS algoritmo

    LPAREN          shift and go to state 45


state 17

    (28) comparacionLog -> comparacion . operadorLog comparacionLog
    (29) comparacionLog -> comparacion .
    (43) operadorLog -> . OPAND
    (44) operadorLog -> . OPOR
    (45) operadorLog -> . OPXOR
    (46) operadorLog -> . AND
    (47) operadorLog -> . OR

    $end            reduce using rule 29 (comparacionLog -> comparacion .)
    END             reduce using rule 29 (comparacionLog -> comparacion .)
    OPAND           shift and go to state 47
    OPOR            shift and go to state 48
    OPXOR           shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51

    operadorLog                    shift and go to state 46

state 18

    (13) sentenciaWhile -> WHILE . LPAREN comparacion RPAREN DOSPUNTOS algoritmo

    LPAREN          shift and go to state 52


state 19

    (51) sentenciaFuncion -> DEF . expresion_funcion expresion END
    (48) expresion_funcion -> . VARIABLE LPAREN parametros RPAREN

    VARIABLE        shift and go to state 54

    expresion_funcion              shift and go to state 53

state 20

    (22) ingreso -> gets .

    $end            reduce using rule 22 (ingreso -> gets .)
    END             reduce using rule 22 (ingreso -> gets .)


state 21

    (12) sentenciaElse -> ELSE . algoritmo END
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . sentenciaIf
    (5) algoritmo -> . comparacionLog
    (6) algoritmo -> . sentenciaWhile
    (7) algoritmo -> . sentenciaFuncion
    (8) algoritmo -> . expresion_funcion
    (9) algoritmo -> . ingreso
    (10) algoritmo -> . sentenciaElse
    (15) imprimir -> . print
    (16) imprimir -> . puts
    (14) asignacion -> . VARIABLE IGUAL valores
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (11) sentenciaIf -> . IF LPAREN comparacion RPAREN DOSPUNTOS algoritmo
    (28) comparacionLog -> . comparacion operadorLog comparacionLog
    (29) comparacionLog -> . comparacion
    (13) sentenciaWhile -> . WHILE LPAREN comparacion RPAREN DOSPUNTOS algoritmo
    (51) sentenciaFuncion -> . DEF expresion_funcion expresion END
    (48) expresion_funcion -> . VARIABLE LPAREN parametros RPAREN
    (22) ingreso -> . gets
    (12) sentenciaElse -> . ELSE algoritmo END
    (24) print -> . PRINT LPAREN expresion RPAREN
    (25) puts -> . PUTS expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (27) comparacion -> . expresion operadorCom expresion
    (23) gets -> . GETS expresion
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DEF             shift and go to state 19
    ELSE            shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 23
    ENTERO          shift and go to state 24
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26
    GETS            shift and go to state 28

    algoritmo                      shift and go to state 55
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 5
    comparacionLog                 shift and go to state 6
    sentenciaWhile                 shift and go to state 7
    sentenciaFuncion               shift and go to state 8
    expresion_funcion              shift and go to state 9
    ingreso                        shift and go to state 10
    sentenciaElse                  shift and go to state 11
    print                          shift and go to state 12
    puts                           shift and go to state 13
    valor                          shift and go to state 15
    comparacion                    shift and go to state 17
    gets                           shift and go to state 20
    array                          shift and go to state 27

state 22

    (24) print -> PRINT . LPAREN expresion RPAREN

    LPAREN          shift and go to state 56


state 23

    (25) puts -> PUTS . expresion
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    expresion                      shift and go to state 57
    valor                          shift and go to state 15
    array                          shift and go to state 27

state 24

    (56) valor -> ENTERO .

    MAS             reduce using rule 56 (valor -> ENTERO .)
    RESTA           reduce using rule 56 (valor -> ENTERO .)
    DIV             reduce using rule 56 (valor -> ENTERO .)
    PROD            reduce using rule 56 (valor -> ENTERO .)
    POTENCIA        reduce using rule 56 (valor -> ENTERO .)
    MOD             reduce using rule 56 (valor -> ENTERO .)
    MAYOR           reduce using rule 56 (valor -> ENTERO .)
    MENOR           reduce using rule 56 (valor -> ENTERO .)
    MAYORIGU        reduce using rule 56 (valor -> ENTERO .)
    MENORIGU        reduce using rule 56 (valor -> ENTERO .)
    DIFERENTE       reduce using rule 56 (valor -> ENTERO .)
    IGUALA          reduce using rule 56 (valor -> ENTERO .)
    $end            reduce using rule 56 (valor -> ENTERO .)
    END             reduce using rule 56 (valor -> ENTERO .)
    OPAND           reduce using rule 56 (valor -> ENTERO .)
    OPOR            reduce using rule 56 (valor -> ENTERO .)
    OPXOR           reduce using rule 56 (valor -> ENTERO .)
    AND             reduce using rule 56 (valor -> ENTERO .)
    OR              reduce using rule 56 (valor -> ENTERO .)
    RPAREN          reduce using rule 56 (valor -> ENTERO .)
    CDER            reduce using rule 56 (valor -> ENTERO .)


state 25

    (58) valor -> CADENA .

    MAS             reduce using rule 58 (valor -> CADENA .)
    RESTA           reduce using rule 58 (valor -> CADENA .)
    DIV             reduce using rule 58 (valor -> CADENA .)
    PROD            reduce using rule 58 (valor -> CADENA .)
    POTENCIA        reduce using rule 58 (valor -> CADENA .)
    MOD             reduce using rule 58 (valor -> CADENA .)
    MAYOR           reduce using rule 58 (valor -> CADENA .)
    MENOR           reduce using rule 58 (valor -> CADENA .)
    MAYORIGU        reduce using rule 58 (valor -> CADENA .)
    MENORIGU        reduce using rule 58 (valor -> CADENA .)
    DIFERENTE       reduce using rule 58 (valor -> CADENA .)
    IGUALA          reduce using rule 58 (valor -> CADENA .)
    $end            reduce using rule 58 (valor -> CADENA .)
    END             reduce using rule 58 (valor -> CADENA .)
    OPAND           reduce using rule 58 (valor -> CADENA .)
    OPOR            reduce using rule 58 (valor -> CADENA .)
    OPXOR           reduce using rule 58 (valor -> CADENA .)
    AND             reduce using rule 58 (valor -> CADENA .)
    OR              reduce using rule 58 (valor -> CADENA .)
    RPAREN          reduce using rule 58 (valor -> CADENA .)
    CDER            reduce using rule 58 (valor -> CADENA .)


state 26

    (59) valor -> DECIMAL .

    MAS             reduce using rule 59 (valor -> DECIMAL .)
    RESTA           reduce using rule 59 (valor -> DECIMAL .)
    DIV             reduce using rule 59 (valor -> DECIMAL .)
    PROD            reduce using rule 59 (valor -> DECIMAL .)
    POTENCIA        reduce using rule 59 (valor -> DECIMAL .)
    MOD             reduce using rule 59 (valor -> DECIMAL .)
    MAYOR           reduce using rule 59 (valor -> DECIMAL .)
    MENOR           reduce using rule 59 (valor -> DECIMAL .)
    MAYORIGU        reduce using rule 59 (valor -> DECIMAL .)
    MENORIGU        reduce using rule 59 (valor -> DECIMAL .)
    DIFERENTE       reduce using rule 59 (valor -> DECIMAL .)
    IGUALA          reduce using rule 59 (valor -> DECIMAL .)
    $end            reduce using rule 59 (valor -> DECIMAL .)
    END             reduce using rule 59 (valor -> DECIMAL .)
    OPAND           reduce using rule 59 (valor -> DECIMAL .)
    OPOR            reduce using rule 59 (valor -> DECIMAL .)
    OPXOR           reduce using rule 59 (valor -> DECIMAL .)
    AND             reduce using rule 59 (valor -> DECIMAL .)
    OR              reduce using rule 59 (valor -> DECIMAL .)
    RPAREN          reduce using rule 59 (valor -> DECIMAL .)
    CDER            reduce using rule 59 (valor -> DECIMAL .)


state 27

    (60) valor -> array .

    MAS             reduce using rule 60 (valor -> array .)
    RESTA           reduce using rule 60 (valor -> array .)
    DIV             reduce using rule 60 (valor -> array .)
    PROD            reduce using rule 60 (valor -> array .)
    POTENCIA        reduce using rule 60 (valor -> array .)
    MOD             reduce using rule 60 (valor -> array .)
    MAYOR           reduce using rule 60 (valor -> array .)
    MENOR           reduce using rule 60 (valor -> array .)
    MAYORIGU        reduce using rule 60 (valor -> array .)
    MENORIGU        reduce using rule 60 (valor -> array .)
    DIFERENTE       reduce using rule 60 (valor -> array .)
    IGUALA          reduce using rule 60 (valor -> array .)
    $end            reduce using rule 60 (valor -> array .)
    END             reduce using rule 60 (valor -> array .)
    OPAND           reduce using rule 60 (valor -> array .)
    OPOR            reduce using rule 60 (valor -> array .)
    OPXOR           reduce using rule 60 (valor -> array .)
    AND             reduce using rule 60 (valor -> array .)
    OR              reduce using rule 60 (valor -> array .)
    RPAREN          reduce using rule 60 (valor -> array .)
    CDER            reduce using rule 60 (valor -> array .)


state 28

    (23) gets -> GETS . expresion
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    expresion                      shift and go to state 59
    valor                          shift and go to state 15
    array                          shift and go to state 27

state 29

    (27) comparacion -> expresion operadorCom . expresion
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    expresion                      shift and go to state 60
    valor                          shift and go to state 15
    array                          shift and go to state 27

state 30

    (37) operadorCom -> MAYOR .

    ENTERO          reduce using rule 37 (operadorCom -> MAYOR .)
    VARIABLE        reduce using rule 37 (operadorCom -> MAYOR .)
    CADENA          reduce using rule 37 (operadorCom -> MAYOR .)
    DECIMAL         reduce using rule 37 (operadorCom -> MAYOR .)


state 31

    (38) operadorCom -> MENOR .

    ENTERO          reduce using rule 38 (operadorCom -> MENOR .)
    VARIABLE        reduce using rule 38 (operadorCom -> MENOR .)
    CADENA          reduce using rule 38 (operadorCom -> MENOR .)
    DECIMAL         reduce using rule 38 (operadorCom -> MENOR .)


state 32

    (39) operadorCom -> MAYORIGU .

    ENTERO          reduce using rule 39 (operadorCom -> MAYORIGU .)
    VARIABLE        reduce using rule 39 (operadorCom -> MAYORIGU .)
    CADENA          reduce using rule 39 (operadorCom -> MAYORIGU .)
    DECIMAL         reduce using rule 39 (operadorCom -> MAYORIGU .)


state 33

    (40) operadorCom -> MENORIGU .

    ENTERO          reduce using rule 40 (operadorCom -> MENORIGU .)
    VARIABLE        reduce using rule 40 (operadorCom -> MENORIGU .)
    CADENA          reduce using rule 40 (operadorCom -> MENORIGU .)
    DECIMAL         reduce using rule 40 (operadorCom -> MENORIGU .)


state 34

    (41) operadorCom -> DIFERENTE .

    ENTERO          reduce using rule 41 (operadorCom -> DIFERENTE .)
    VARIABLE        reduce using rule 41 (operadorCom -> DIFERENTE .)
    CADENA          reduce using rule 41 (operadorCom -> DIFERENTE .)
    DECIMAL         reduce using rule 41 (operadorCom -> DIFERENTE .)


state 35

    (42) operadorCom -> IGUALA .

    ENTERO          reduce using rule 42 (operadorCom -> IGUALA .)
    VARIABLE        reduce using rule 42 (operadorCom -> IGUALA .)
    CADENA          reduce using rule 42 (operadorCom -> IGUALA .)
    DECIMAL         reduce using rule 42 (operadorCom -> IGUALA .)


state 36

    (14) asignacion -> VARIABLE IGUAL . valores
    (52) array -> VARIABLE IGUAL . CIZQ CDER
    (53) array -> VARIABLE IGUAL . CIZQ valor CDER
    (54) array -> VARIABLE IGUAL . ARRAY NEW
    (55) array -> VARIABLE IGUAL . ARRAY NEW LPAREN parametros RPAREN
    (17) valores -> . expresion
    (18) valores -> . true
    (19) valores -> . false
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (20) true -> . TRUE
    (21) false -> . FALSE
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    CIZQ            shift and go to state 62
    ARRAY           shift and go to state 63
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68
    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    valores                        shift and go to state 61
    valor                          shift and go to state 15
    expresion                      shift and go to state 64
    true                           shift and go to state 65
    false                          shift and go to state 66
    array                          shift and go to state 27

state 37

    (48) expresion_funcion -> VARIABLE LPAREN . parametros RPAREN
    (49) parametros -> . valor
    (50) parametros -> . asignacion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (14) asignacion -> . VARIABLE IGUAL valores
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 69
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    parametros                     shift and go to state 70
    valor                          shift and go to state 71
    asignacion                     shift and go to state 72
    array                          shift and go to state 27

state 38

    (30) expresion -> valor operadorMat . expresion
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    valor                          shift and go to state 15
    expresion                      shift and go to state 73
    array                          shift and go to state 27

state 39

    (31) operadorMat -> MAS .

    ENTERO          reduce using rule 31 (operadorMat -> MAS .)
    VARIABLE        reduce using rule 31 (operadorMat -> MAS .)
    CADENA          reduce using rule 31 (operadorMat -> MAS .)
    DECIMAL         reduce using rule 31 (operadorMat -> MAS .)


state 40

    (32) operadorMat -> RESTA .

    ENTERO          reduce using rule 32 (operadorMat -> RESTA .)
    VARIABLE        reduce using rule 32 (operadorMat -> RESTA .)
    CADENA          reduce using rule 32 (operadorMat -> RESTA .)
    DECIMAL         reduce using rule 32 (operadorMat -> RESTA .)


state 41

    (33) operadorMat -> DIV .

    ENTERO          reduce using rule 33 (operadorMat -> DIV .)
    VARIABLE        reduce using rule 33 (operadorMat -> DIV .)
    CADENA          reduce using rule 33 (operadorMat -> DIV .)
    DECIMAL         reduce using rule 33 (operadorMat -> DIV .)


state 42

    (34) operadorMat -> PROD .

    ENTERO          reduce using rule 34 (operadorMat -> PROD .)
    VARIABLE        reduce using rule 34 (operadorMat -> PROD .)
    CADENA          reduce using rule 34 (operadorMat -> PROD .)
    DECIMAL         reduce using rule 34 (operadorMat -> PROD .)


state 43

    (35) operadorMat -> POTENCIA .

    ENTERO          reduce using rule 35 (operadorMat -> POTENCIA .)
    VARIABLE        reduce using rule 35 (operadorMat -> POTENCIA .)
    CADENA          reduce using rule 35 (operadorMat -> POTENCIA .)
    DECIMAL         reduce using rule 35 (operadorMat -> POTENCIA .)


state 44

    (36) operadorMat -> MOD .

    ENTERO          reduce using rule 36 (operadorMat -> MOD .)
    VARIABLE        reduce using rule 36 (operadorMat -> MOD .)
    CADENA          reduce using rule 36 (operadorMat -> MOD .)
    DECIMAL         reduce using rule 36 (operadorMat -> MOD .)


state 45

    (11) sentenciaIf -> IF LPAREN . comparacion RPAREN DOSPUNTOS algoritmo
    (27) comparacion -> . expresion operadorCom expresion
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    comparacion                    shift and go to state 74
    expresion                      shift and go to state 75
    valor                          shift and go to state 15
    array                          shift and go to state 27

state 46

    (28) comparacionLog -> comparacion operadorLog . comparacionLog
    (28) comparacionLog -> . comparacion operadorLog comparacionLog
    (29) comparacionLog -> . comparacion
    (27) comparacion -> . expresion operadorCom expresion
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    comparacion                    shift and go to state 17
    comparacionLog                 shift and go to state 76
    expresion                      shift and go to state 75
    valor                          shift and go to state 15
    array                          shift and go to state 27

state 47

    (43) operadorLog -> OPAND .

    ENTERO          reduce using rule 43 (operadorLog -> OPAND .)
    VARIABLE        reduce using rule 43 (operadorLog -> OPAND .)
    CADENA          reduce using rule 43 (operadorLog -> OPAND .)
    DECIMAL         reduce using rule 43 (operadorLog -> OPAND .)


state 48

    (44) operadorLog -> OPOR .

    ENTERO          reduce using rule 44 (operadorLog -> OPOR .)
    VARIABLE        reduce using rule 44 (operadorLog -> OPOR .)
    CADENA          reduce using rule 44 (operadorLog -> OPOR .)
    DECIMAL         reduce using rule 44 (operadorLog -> OPOR .)


state 49

    (45) operadorLog -> OPXOR .

    ENTERO          reduce using rule 45 (operadorLog -> OPXOR .)
    VARIABLE        reduce using rule 45 (operadorLog -> OPXOR .)
    CADENA          reduce using rule 45 (operadorLog -> OPXOR .)
    DECIMAL         reduce using rule 45 (operadorLog -> OPXOR .)


state 50

    (46) operadorLog -> AND .

    ENTERO          reduce using rule 46 (operadorLog -> AND .)
    VARIABLE        reduce using rule 46 (operadorLog -> AND .)
    CADENA          reduce using rule 46 (operadorLog -> AND .)
    DECIMAL         reduce using rule 46 (operadorLog -> AND .)


state 51

    (47) operadorLog -> OR .

    ENTERO          reduce using rule 47 (operadorLog -> OR .)
    VARIABLE        reduce using rule 47 (operadorLog -> OR .)
    CADENA          reduce using rule 47 (operadorLog -> OR .)
    DECIMAL         reduce using rule 47 (operadorLog -> OR .)


state 52

    (13) sentenciaWhile -> WHILE LPAREN . comparacion RPAREN DOSPUNTOS algoritmo
    (27) comparacion -> . expresion operadorCom expresion
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    comparacion                    shift and go to state 77
    expresion                      shift and go to state 75
    valor                          shift and go to state 15
    array                          shift and go to state 27

state 53

    (51) sentenciaFuncion -> DEF expresion_funcion . expresion END
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    expresion                      shift and go to state 78
    valor                          shift and go to state 15
    array                          shift and go to state 27

state 54

    (48) expresion_funcion -> VARIABLE . LPAREN parametros RPAREN

    LPAREN          shift and go to state 37


state 55

    (12) sentenciaElse -> ELSE algoritmo . END

    END             shift and go to state 79


state 56

    (24) print -> PRINT LPAREN . expresion RPAREN
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    expresion                      shift and go to state 80
    valor                          shift and go to state 15
    array                          shift and go to state 27

state 57

    (25) puts -> PUTS expresion .

    $end            reduce using rule 25 (puts -> PUTS expresion .)
    END             reduce using rule 25 (puts -> PUTS expresion .)


state 58

    (57) valor -> VARIABLE .
    (52) array -> VARIABLE . IGUAL CIZQ CDER
    (53) array -> VARIABLE . IGUAL CIZQ valor CDER
    (54) array -> VARIABLE . IGUAL ARRAY NEW
    (55) array -> VARIABLE . IGUAL ARRAY NEW LPAREN parametros RPAREN

    MAS             reduce using rule 57 (valor -> VARIABLE .)
    RESTA           reduce using rule 57 (valor -> VARIABLE .)
    DIV             reduce using rule 57 (valor -> VARIABLE .)
    PROD            reduce using rule 57 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 57 (valor -> VARIABLE .)
    MOD             reduce using rule 57 (valor -> VARIABLE .)
    $end            reduce using rule 57 (valor -> VARIABLE .)
    END             reduce using rule 57 (valor -> VARIABLE .)
    OPAND           reduce using rule 57 (valor -> VARIABLE .)
    OPOR            reduce using rule 57 (valor -> VARIABLE .)
    OPXOR           reduce using rule 57 (valor -> VARIABLE .)
    AND             reduce using rule 57 (valor -> VARIABLE .)
    OR              reduce using rule 57 (valor -> VARIABLE .)
    RPAREN          reduce using rule 57 (valor -> VARIABLE .)
    MAYOR           reduce using rule 57 (valor -> VARIABLE .)
    MENOR           reduce using rule 57 (valor -> VARIABLE .)
    MAYORIGU        reduce using rule 57 (valor -> VARIABLE .)
    MENORIGU        reduce using rule 57 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 57 (valor -> VARIABLE .)
    IGUALA          reduce using rule 57 (valor -> VARIABLE .)
    CDER            reduce using rule 57 (valor -> VARIABLE .)
    IGUAL           shift and go to state 81


state 59

    (23) gets -> GETS expresion .

    $end            reduce using rule 23 (gets -> GETS expresion .)
    END             reduce using rule 23 (gets -> GETS expresion .)


state 60

    (27) comparacion -> expresion operadorCom expresion .

    OPAND           reduce using rule 27 (comparacion -> expresion operadorCom expresion .)
    OPOR            reduce using rule 27 (comparacion -> expresion operadorCom expresion .)
    OPXOR           reduce using rule 27 (comparacion -> expresion operadorCom expresion .)
    AND             reduce using rule 27 (comparacion -> expresion operadorCom expresion .)
    OR              reduce using rule 27 (comparacion -> expresion operadorCom expresion .)
    $end            reduce using rule 27 (comparacion -> expresion operadorCom expresion .)
    END             reduce using rule 27 (comparacion -> expresion operadorCom expresion .)
    RPAREN          reduce using rule 27 (comparacion -> expresion operadorCom expresion .)


state 61

    (14) asignacion -> VARIABLE IGUAL valores .

    $end            reduce using rule 14 (asignacion -> VARIABLE IGUAL valores .)
    END             reduce using rule 14 (asignacion -> VARIABLE IGUAL valores .)
    RPAREN          reduce using rule 14 (asignacion -> VARIABLE IGUAL valores .)


state 62

    (52) array -> VARIABLE IGUAL CIZQ . CDER
    (53) array -> VARIABLE IGUAL CIZQ . valor CDER
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    CDER            shift and go to state 82
    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 58
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    valor                          shift and go to state 83
    array                          shift and go to state 27

state 63

    (54) array -> VARIABLE IGUAL ARRAY . NEW
    (55) array -> VARIABLE IGUAL ARRAY . NEW LPAREN parametros RPAREN

    NEW             shift and go to state 84


state 64

    (17) valores -> expresion .

    $end            reduce using rule 17 (valores -> expresion .)
    END             reduce using rule 17 (valores -> expresion .)
    RPAREN          reduce using rule 17 (valores -> expresion .)


state 65

    (18) valores -> true .

    $end            reduce using rule 18 (valores -> true .)
    END             reduce using rule 18 (valores -> true .)
    RPAREN          reduce using rule 18 (valores -> true .)


state 66

    (19) valores -> false .

    $end            reduce using rule 19 (valores -> false .)
    END             reduce using rule 19 (valores -> false .)
    RPAREN          reduce using rule 19 (valores -> false .)


state 67

    (20) true -> TRUE .

    $end            reduce using rule 20 (true -> TRUE .)
    END             reduce using rule 20 (true -> TRUE .)
    RPAREN          reduce using rule 20 (true -> TRUE .)


state 68

    (21) false -> FALSE .

    $end            reduce using rule 21 (false -> FALSE .)
    END             reduce using rule 21 (false -> FALSE .)
    RPAREN          reduce using rule 21 (false -> FALSE .)


state 69

    (57) valor -> VARIABLE .
    (14) asignacion -> VARIABLE . IGUAL valores
    (52) array -> VARIABLE . IGUAL CIZQ CDER
    (53) array -> VARIABLE . IGUAL CIZQ valor CDER
    (54) array -> VARIABLE . IGUAL ARRAY NEW
    (55) array -> VARIABLE . IGUAL ARRAY NEW LPAREN parametros RPAREN

    RPAREN          reduce using rule 57 (valor -> VARIABLE .)
    IGUAL           shift and go to state 36


state 70

    (48) expresion_funcion -> VARIABLE LPAREN parametros . RPAREN

    RPAREN          shift and go to state 85


state 71

    (49) parametros -> valor .

    RPAREN          reduce using rule 49 (parametros -> valor .)


state 72

    (50) parametros -> asignacion .

    RPAREN          reduce using rule 50 (parametros -> asignacion .)


state 73

    (30) expresion -> valor operadorMat expresion .

    MAYOR           reduce using rule 30 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 30 (expresion -> valor operadorMat expresion .)
    MAYORIGU        reduce using rule 30 (expresion -> valor operadorMat expresion .)
    MENORIGU        reduce using rule 30 (expresion -> valor operadorMat expresion .)
    DIFERENTE       reduce using rule 30 (expresion -> valor operadorMat expresion .)
    IGUALA          reduce using rule 30 (expresion -> valor operadorMat expresion .)
    $end            reduce using rule 30 (expresion -> valor operadorMat expresion .)
    END             reduce using rule 30 (expresion -> valor operadorMat expresion .)
    OPAND           reduce using rule 30 (expresion -> valor operadorMat expresion .)
    OPOR            reduce using rule 30 (expresion -> valor operadorMat expresion .)
    OPXOR           reduce using rule 30 (expresion -> valor operadorMat expresion .)
    AND             reduce using rule 30 (expresion -> valor operadorMat expresion .)
    OR              reduce using rule 30 (expresion -> valor operadorMat expresion .)
    RPAREN          reduce using rule 30 (expresion -> valor operadorMat expresion .)


state 74

    (11) sentenciaIf -> IF LPAREN comparacion . RPAREN DOSPUNTOS algoritmo

    RPAREN          shift and go to state 86


state 75

    (27) comparacion -> expresion . operadorCom expresion
    (37) operadorCom -> . MAYOR
    (38) operadorCom -> . MENOR
    (39) operadorCom -> . MAYORIGU
    (40) operadorCom -> . MENORIGU
    (41) operadorCom -> . DIFERENTE
    (42) operadorCom -> . IGUALA

    MAYOR           shift and go to state 30
    MENOR           shift and go to state 31
    MAYORIGU        shift and go to state 32
    MENORIGU        shift and go to state 33
    DIFERENTE       shift and go to state 34
    IGUALA          shift and go to state 35

    operadorCom                    shift and go to state 29

state 76

    (28) comparacionLog -> comparacion operadorLog comparacionLog .

    $end            reduce using rule 28 (comparacionLog -> comparacion operadorLog comparacionLog .)
    END             reduce using rule 28 (comparacionLog -> comparacion operadorLog comparacionLog .)


state 77

    (13) sentenciaWhile -> WHILE LPAREN comparacion . RPAREN DOSPUNTOS algoritmo

    RPAREN          shift and go to state 87


state 78

    (51) sentenciaFuncion -> DEF expresion_funcion expresion . END

    END             shift and go to state 88


state 79

    (12) sentenciaElse -> ELSE algoritmo END .

    $end            reduce using rule 12 (sentenciaElse -> ELSE algoritmo END .)
    END             reduce using rule 12 (sentenciaElse -> ELSE algoritmo END .)


state 80

    (24) print -> PRINT LPAREN expresion . RPAREN

    RPAREN          shift and go to state 89


state 81

    (52) array -> VARIABLE IGUAL . CIZQ CDER
    (53) array -> VARIABLE IGUAL . CIZQ valor CDER
    (54) array -> VARIABLE IGUAL . ARRAY NEW
    (55) array -> VARIABLE IGUAL . ARRAY NEW LPAREN parametros RPAREN

    CIZQ            shift and go to state 62
    ARRAY           shift and go to state 63


state 82

    (52) array -> VARIABLE IGUAL CIZQ CDER .

    MAS             reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    RESTA           reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    DIV             reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    PROD            reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    POTENCIA        reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    MOD             reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    MAYOR           reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    MENOR           reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    MAYORIGU        reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    MENORIGU        reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    DIFERENTE       reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    IGUALA          reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    $end            reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    END             reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    OPAND           reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    OPOR            reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    OPXOR           reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    AND             reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    OR              reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    RPAREN          reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)
    CDER            reduce using rule 52 (array -> VARIABLE IGUAL CIZQ CDER .)


state 83

    (53) array -> VARIABLE IGUAL CIZQ valor . CDER

    CDER            shift and go to state 90


state 84

    (54) array -> VARIABLE IGUAL ARRAY NEW .
    (55) array -> VARIABLE IGUAL ARRAY NEW . LPAREN parametros RPAREN

    MAS             reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    RESTA           reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    DIV             reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    PROD            reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    POTENCIA        reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    MOD             reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    MAYOR           reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    MENOR           reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    MAYORIGU        reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    MENORIGU        reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    DIFERENTE       reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    IGUALA          reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    $end            reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    END             reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    OPAND           reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    OPOR            reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    OPXOR           reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    AND             reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    OR              reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    RPAREN          reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    CDER            reduce using rule 54 (array -> VARIABLE IGUAL ARRAY NEW .)
    LPAREN          shift and go to state 91


state 85

    (48) expresion_funcion -> VARIABLE LPAREN parametros RPAREN .

    $end            reduce using rule 48 (expresion_funcion -> VARIABLE LPAREN parametros RPAREN .)
    ENTERO          reduce using rule 48 (expresion_funcion -> VARIABLE LPAREN parametros RPAREN .)
    VARIABLE        reduce using rule 48 (expresion_funcion -> VARIABLE LPAREN parametros RPAREN .)
    CADENA          reduce using rule 48 (expresion_funcion -> VARIABLE LPAREN parametros RPAREN .)
    DECIMAL         reduce using rule 48 (expresion_funcion -> VARIABLE LPAREN parametros RPAREN .)
    END             reduce using rule 48 (expresion_funcion -> VARIABLE LPAREN parametros RPAREN .)


state 86

    (11) sentenciaIf -> IF LPAREN comparacion RPAREN . DOSPUNTOS algoritmo

    DOSPUNTOS       shift and go to state 92


state 87

    (13) sentenciaWhile -> WHILE LPAREN comparacion RPAREN . DOSPUNTOS algoritmo

    DOSPUNTOS       shift and go to state 93


state 88

    (51) sentenciaFuncion -> DEF expresion_funcion expresion END .

    $end            reduce using rule 51 (sentenciaFuncion -> DEF expresion_funcion expresion END .)
    END             reduce using rule 51 (sentenciaFuncion -> DEF expresion_funcion expresion END .)


state 89

    (24) print -> PRINT LPAREN expresion RPAREN .

    $end            reduce using rule 24 (print -> PRINT LPAREN expresion RPAREN .)
    END             reduce using rule 24 (print -> PRINT LPAREN expresion RPAREN .)


state 90

    (53) array -> VARIABLE IGUAL CIZQ valor CDER .

    MAS             reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    RESTA           reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    DIV             reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    PROD            reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    POTENCIA        reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    MOD             reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    MAYOR           reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    MENOR           reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    MAYORIGU        reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    MENORIGU        reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    DIFERENTE       reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    IGUALA          reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    $end            reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    END             reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    OPAND           reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    OPOR            reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    OPXOR           reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    AND             reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    OR              reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    RPAREN          reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)
    CDER            reduce using rule 53 (array -> VARIABLE IGUAL CIZQ valor CDER .)


state 91

    (55) array -> VARIABLE IGUAL ARRAY NEW LPAREN . parametros RPAREN
    (49) parametros -> . valor
    (50) parametros -> . asignacion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (14) asignacion -> . VARIABLE IGUAL valores
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    ENTERO          shift and go to state 24
    VARIABLE        shift and go to state 69
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26

    parametros                     shift and go to state 94
    valor                          shift and go to state 71
    asignacion                     shift and go to state 72
    array                          shift and go to state 27

state 92

    (11) sentenciaIf -> IF LPAREN comparacion RPAREN DOSPUNTOS . algoritmo
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . sentenciaIf
    (5) algoritmo -> . comparacionLog
    (6) algoritmo -> . sentenciaWhile
    (7) algoritmo -> . sentenciaFuncion
    (8) algoritmo -> . expresion_funcion
    (9) algoritmo -> . ingreso
    (10) algoritmo -> . sentenciaElse
    (15) imprimir -> . print
    (16) imprimir -> . puts
    (14) asignacion -> . VARIABLE IGUAL valores
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (11) sentenciaIf -> . IF LPAREN comparacion RPAREN DOSPUNTOS algoritmo
    (28) comparacionLog -> . comparacion operadorLog comparacionLog
    (29) comparacionLog -> . comparacion
    (13) sentenciaWhile -> . WHILE LPAREN comparacion RPAREN DOSPUNTOS algoritmo
    (51) sentenciaFuncion -> . DEF expresion_funcion expresion END
    (48) expresion_funcion -> . VARIABLE LPAREN parametros RPAREN
    (22) ingreso -> . gets
    (12) sentenciaElse -> . ELSE algoritmo END
    (24) print -> . PRINT LPAREN expresion RPAREN
    (25) puts -> . PUTS expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (27) comparacion -> . expresion operadorCom expresion
    (23) gets -> . GETS expresion
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DEF             shift and go to state 19
    ELSE            shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 23
    ENTERO          shift and go to state 24
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26
    GETS            shift and go to state 28

    comparacion                    shift and go to state 17
    algoritmo                      shift and go to state 95
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 5
    comparacionLog                 shift and go to state 6
    sentenciaWhile                 shift and go to state 7
    sentenciaFuncion               shift and go to state 8
    expresion_funcion              shift and go to state 9
    ingreso                        shift and go to state 10
    sentenciaElse                  shift and go to state 11
    print                          shift and go to state 12
    puts                           shift and go to state 13
    valor                          shift and go to state 15
    gets                           shift and go to state 20
    array                          shift and go to state 27

state 93

    (13) sentenciaWhile -> WHILE LPAREN comparacion RPAREN DOSPUNTOS . algoritmo
    (1) algoritmo -> . imprimir
    (2) algoritmo -> . asignacion
    (3) algoritmo -> . expresion
    (4) algoritmo -> . sentenciaIf
    (5) algoritmo -> . comparacionLog
    (6) algoritmo -> . sentenciaWhile
    (7) algoritmo -> . sentenciaFuncion
    (8) algoritmo -> . expresion_funcion
    (9) algoritmo -> . ingreso
    (10) algoritmo -> . sentenciaElse
    (15) imprimir -> . print
    (16) imprimir -> . puts
    (14) asignacion -> . VARIABLE IGUAL valores
    (26) expresion -> . valor
    (30) expresion -> . valor operadorMat expresion
    (11) sentenciaIf -> . IF LPAREN comparacion RPAREN DOSPUNTOS algoritmo
    (28) comparacionLog -> . comparacion operadorLog comparacionLog
    (29) comparacionLog -> . comparacion
    (13) sentenciaWhile -> . WHILE LPAREN comparacion RPAREN DOSPUNTOS algoritmo
    (51) sentenciaFuncion -> . DEF expresion_funcion expresion END
    (48) expresion_funcion -> . VARIABLE LPAREN parametros RPAREN
    (22) ingreso -> . gets
    (12) sentenciaElse -> . ELSE algoritmo END
    (24) print -> . PRINT LPAREN expresion RPAREN
    (25) puts -> . PUTS expresion
    (56) valor -> . ENTERO
    (57) valor -> . VARIABLE
    (58) valor -> . CADENA
    (59) valor -> . DECIMAL
    (60) valor -> . array
    (27) comparacion -> . expresion operadorCom expresion
    (23) gets -> . GETS expresion
    (52) array -> . VARIABLE IGUAL CIZQ CDER
    (53) array -> . VARIABLE IGUAL CIZQ valor CDER
    (54) array -> . VARIABLE IGUAL ARRAY NEW
    (55) array -> . VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN

    VARIABLE        shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 18
    DEF             shift and go to state 19
    ELSE            shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 23
    ENTERO          shift and go to state 24
    CADENA          shift and go to state 25
    DECIMAL         shift and go to state 26
    GETS            shift and go to state 28

    comparacion                    shift and go to state 17
    algoritmo                      shift and go to state 96
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    expresion                      shift and go to state 4
    sentenciaIf                    shift and go to state 5
    comparacionLog                 shift and go to state 6
    sentenciaWhile                 shift and go to state 7
    sentenciaFuncion               shift and go to state 8
    expresion_funcion              shift and go to state 9
    ingreso                        shift and go to state 10
    sentenciaElse                  shift and go to state 11
    print                          shift and go to state 12
    puts                           shift and go to state 13
    valor                          shift and go to state 15
    gets                           shift and go to state 20
    array                          shift and go to state 27

state 94

    (55) array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros . RPAREN

    RPAREN          shift and go to state 97


state 95

    (11) sentenciaIf -> IF LPAREN comparacion RPAREN DOSPUNTOS algoritmo .

    $end            reduce using rule 11 (sentenciaIf -> IF LPAREN comparacion RPAREN DOSPUNTOS algoritmo .)
    END             reduce using rule 11 (sentenciaIf -> IF LPAREN comparacion RPAREN DOSPUNTOS algoritmo .)


state 96

    (13) sentenciaWhile -> WHILE LPAREN comparacion RPAREN DOSPUNTOS algoritmo .

    $end            reduce using rule 13 (sentenciaWhile -> WHILE LPAREN comparacion RPAREN DOSPUNTOS algoritmo .)
    END             reduce using rule 13 (sentenciaWhile -> WHILE LPAREN comparacion RPAREN DOSPUNTOS algoritmo .)


state 97

    (55) array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .

    MAS             reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    RESTA           reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    DIV             reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    PROD            reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    POTENCIA        reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    MOD             reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    MAYOR           reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    MENOR           reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    MAYORIGU        reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    MENORIGU        reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    DIFERENTE       reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    IGUALA          reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    $end            reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    END             reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    OPAND           reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    OPOR            reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    OPXOR           reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    AND             reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    OR              reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    RPAREN          reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)
    CDER            reduce using rule 55 (array -> VARIABLE IGUAL ARRAY NEW LPAREN parametros RPAREN .)

